package com.sismics.reader.rest.resource;

import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Daily report generation.
 */
@Path("/report")
public class ReportResource extends BaseResource {
    /**
     * Returns the daily report generated by the LLM.
     *
     * @return Response containing the report data in JSON format
     */
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response report() throws JSONException {
        try {
            String currentDir = System.getProperty("user.dir");
            String basePath = "../llm/";
            String pythonExecutable = basePath + "myenv/bin/python";
            String scriptPath = "daily-report.py";
            String fullScriptPath = currentDir.split("reader-web")[0] + "llm/" + scriptPath;

            // Read a local file
            String filePath = basePath + "report.md";
            String reportContent = "";
            try (BufferedReader fileReader = new BufferedReader(new InputStreamReader(new FileInputStream(filePath)))) {
                String line;
                StringBuilder contentBuilder = new StringBuilder();
                while ((line = fileReader.readLine()) != null) {
                    contentBuilder.append(line).append("\n");
                }
                reportContent = contentBuilder.toString();
            } catch (IOException e) {
                reportContent = "Error reading file: " + e.getMessage();
            }

            JSONObject jsonResponse = new JSONObject();
            
            if (reportContent.isEmpty() || reportContent.startsWith("Error")) {
                // Create the process builder for the Python script
                ProcessBuilder processBuilder = new ProcessBuilder(pythonExecutable, fullScriptPath, basePath);
                processBuilder.redirectErrorStream(true); // Combine standard output and error streams

                // Run the process in a separate thread
                Runnable processTask = () -> {
                    try {
                        Process process = processBuilder.start();

                        // Read the script's output
                        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                            String line;
                            while ((line = reader.readLine()) != null) {
                                System.out.println(line); // Log output to console or file
                            }
                        }

                        int exitCode = process.waitFor();
                        if (exitCode != 0) {
                            System.err.println("Python script exited with code: " + exitCode);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                };
                // Submit the task to a thread or executor
                new Thread(processTask).start();

                // Respond immediately with a success message
                jsonResponse.put("status", "pending");
                jsonResponse.put("report", "Report generation started in the background.");
            } else {
                jsonResponse.put("status", "success");
                jsonResponse.put("report", reportContent);
            }
            
            return Response.ok().entity(jsonResponse.toString()).build();
            
        } catch (Exception e) {
            JSONObject errorResponse = new JSONObject();
            errorResponse.put("status", "error");
            errorResponse.put("message", e.getMessage());
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                    .entity(errorResponse.toString())
                    .build();
        }
    }
}