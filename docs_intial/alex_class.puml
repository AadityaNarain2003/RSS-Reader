@startuml classdiagram

package "project-1-team-8" {
    package "Subscription and Content Subsystem" {
    package "com.sismics.reader.core.dao.jpa.dto"{
    class FeedDto {
    - String id
    - String rssUrl

    ' + String getId()
    ' + void setId(String id)
    ' + String getRssUrl()
    ' + void setRssUrl(String rssUrl)
    }
    class FeedSubscriptionDto {
    - id : String
    - feedSubscriptionTitle : String
    - feedTitle : String
    - userId : String
    - feedId : String
    - feedRssUrl : String
    - feedUrl : String
    - feedDescription : String
    - unreadUserArticleCount : int
    - synchronizationFailCount : int
    - createDate : Date
    - categoryId : String
    - categoryParentId : String
    - categoryName : String
    - categoryFolded : boolean

    ' + getId() : String
    ' + setId(String id) : void
    ' + getFeedSubscriptionTitle() : String 
    ' + setFeedSubscriptionTitle(String feedSubscriptionTitle) : void 
    ' + getFeedTitle() : String 
    ' + setFeedTitle(String feedTitle) : void 
    ' + getUserId() : String
    ' + setUserId(String userId) : void 
    ' + getFeedId() : String
    ' + setFeedId(String feedId) : void
    ' + getFeedRssUrl() : String
    ' + setFeedRssUrl(String feedRssUrl) : void
    ' + getFeedUrl() : String 
    ' + setFeedUrl(String feedUrl) : void 
    ' + getFeedDescription() : String 
    ' + setFeedDescription(String feedDescription) : void 
    ' + getUnreadUserArticleCount() : int
    ' + setUnreadUserArticleCount(Integer unreadUserArticleCount) : void
    ' + getSynchronizationFailCount() : int
    ' + setSynchronizationFailCount(Integer synchronizationFailCount) : void
    ' + getCreateDate() : Date
    ' + setCreateDate(Date createDate) : void
    ' + getCategoryId() : String
    ' + setCategoryId(String categoryId) : void
    ' + getCategoryParentId() : String
    ' + setCategoryParentId(String categoryParentId) : void
    ' + getCategoryName() : String
    ' + setCategoryName(String categoryName) : void
    ' + isCategoryFolded() : boolean
    ' + setCategoryFolded(boolean categoryFolded) : void
}
class JobDto {
    - String id
    - String name
    - String userId
    - Long createTimestamp
    - Long startTimestamp
    - Long endTimestamp

    ' + String getId()
    ' + void setId(String id)
    ' + String getName()
    ' + void setName(String name)
    ' + String getUserId()
    ' + void setUserId(String userId)
    ' + Long getCreateTimestamp()
    ' + void setCreateTimestamp(Long createTimestamp)
    ' + Long getStartTimestamp()
    ' + void setStartTimestamp(Long startTimestamp)
    ' + Long getEndTimestamp()
    ' + void setEndTimestamp(Long endTimestamp)
}
class JobEventDto {
    - id : String
    - name : String
    - value : String

    ' + getId(): String
    ' + setId(String id): void
    ' + getName(): String
    ' + setName(String name): void
    ' + getValue(): String
    ' + setValue(String value): void
}

class UserArticleDto {
    - id : String
    - readTimestamp : Long
    - starTimestamp : Long
    - feedTitle : String
    - feedSubscriptionId : String
    - feedSubscriptionTitle : String
    - articleId : String
    - articleUrl : String
    - articleGuid : String
    - articleTitle : String
    - articleCreator : String
    - articleDescription : String
    - articleCommentUrl : String
    - articleCommentCount : Integer
    - articleEnclosureUrl : String
    - articleEnclosureLength : Integer
    - articleEnclosureType : String
    - articlePublicationTimestamp : Long

    ' + getId(): String
    ' + setId(String id): void
    ' + getReadTimestamp(): Long
    ' + setReadTimestamp(Long readTimestamp): void
    ' + getStarTimestamp(): Long
    ' + setStarTimestamp(Long starTimestamp): void
    ' + getFeedTitle(): String
    ' + setFeedTitle(String feedTitle): void
    ' + getFeedSubscriptionId(): String
    ' + setFeedSubscriptionId(String feedSubscriptionId): void
    ' + getFeedSubscriptionTitle(): String
    ' + setFeedSubscriptionTitle(String feedSubscriptionTitle): void
    ' + getArticleId(): String
    ' + setArticleId(String articleId): void
    ' + getArticleUrl(): String
    ' + setArticleUrl(String articleUrl): void
    ' + getArticleGuid(): String
    ' + setArticleGuid(String articleGuid): void
    ' + getArticleTitle(): String
    ' + setArticleTitle(String articleTitle): void
    ' + getArticleCreator(): String
    ' + setArticleCreator(String articleCreator): void
    ' + getArticleDescription(): String
    ' + setArticleDescription(String articleDescription): void
    ' + getArticleCommentUrl(): String
    ' + setArticleCommentUrl(String articleCommentUrl): void
    ' + getArticleCommentCount(): Integer
    ' + setArticleCommentCount(Integer articleCommentCount): void
    ' + getArticleEnclosureUrl(): String
    ' + setArticleEnclosureUrl(String articleEnclosureUrl): void
    ' + getArticleEnclosureLength(): Integer
    ' + setArticleEnclosureLength(Integer articleEnclosureLength): void
    ' + getArticleEnclosureType(): String
    ' + setArticleEnclosureType(String articleEnclosureType): void
    ' + getArticlePublicationTimestamp(): Long
    ' + setArticlePublicationTimestamp(Long articlePublicationTimestamp): void
    }
    class ArticleDto {
    - id : String
    - url : String
    - guid : String
    - title : String
    - creator : String
    - description : String
    - commentUrl : String
    - commentCount : int
    - enclosureUrl : String
    - nclosureCount : int
    - enclosureType : String
    - publicationDate : Date
    - createDate : Date
    - feedId : String
    ' + getId() : String
    ' + etId(String id) : void
    ' + getUrl() : String
    ' + setUrl(String url) : void
    ' + getGuid() : String
    ' + setGuid(String guid) : void
    ' + getTitle() : String
    ' + setTitle(String title) : void
    ' + getCreator() : String
    ' + setCreator(String creator) : void
    ' + getDescription() : String
    ' + setDescription(String description) : void
    ' + getCommentUrl() : String
    ' + setCommentUrl(String commentUrl) : void
    ' + getCommentCount() : int
    ' + setCommentCount(Integer commentCount) : void
    ' + getEnclosureUrl() : String
    ' + setEnclosureUrl(String enclosureUrl) : void
    ' + getEnclosureCount() : int
    ' + setEnclosureCount(Integer enclosureCount) : void
    ' + setEnclosureType(String enclosureType) : void
    ' + getPublicationDate() : Date
    ' + setPublicationDate(Date publicationDate) : void
    ' + getCreateDate() : Date
    ' + setCreateDate(Date createDate) : void
    ' + getFeedId() : String
    ' + setFeedId(String feedId) : void
    }
    }
    package com.sismics.reader.core.dao.file.json {
    class Feed {
        - String url
        - String baseUri
        - String language
        + setUrl(String url): void
        + setBaseUri(String baseUri): void
        + setLanguage(String language): void
        + void setRssUrl(String rssUrl)
        + void setTitle(String title)
        + void setUrl(String url)
    }
    package com.sismics.reader.core.dao.file.opml {
    class Outline {
        + void setText(String text)
        + void setTitle(String title)
        + void setXmlUrl(String xmlUrl)
        + void setHtmlUrl(String htmlUrl)
        + void setType(String type)
        + List<Outline> getOutlineList()
    }
    class OpmlFlattener {
        + {static} flatten(List<Outline> outlineList) : Map<String, List<Outline>> 
        - {static} flatten(List<Outline> outlineTree, Map<String, List<Outline>> outlineMap, String prefix) : void
        - {static} getPrefix(Outline outline, String prefix) : String
    }
    ' class outline is not shown in diagram as it has only getter and setter methods which are required for the 
    ' implementation 
    class OpmlReader extends DefaultHandler {
        - content : String 
        - rootOutline : Outline
        - currentOutline : Outline 
        ' - Element { UNKNOWN, OPML, BODY, OUTLINE } : enum 
        - currentElement : Element
        - elementStack : Stack<Element>
        - outlineStack : Stack<Outline> 
        + OpmlReader() : void 
        + read(InputStream is) : void
        + getOutlineList() : List<Outline>
        + startElement(String uri, String localName, String qName, Attributes attributes) : void
        + endElement(String uri, String localName, String qName) : void
        + characters(char[] ch, int start, int length) : void
        - pushElement(Element newElement) : void
        - popElement() : void
    }
    class Outline {
        - text : String 
        - title : String
        - type : String
        - xmlUrl : String
        - htmlUrl : String
        - outlineList : List<Outline>
        + Outline() : void
        + getText() : String
        + setText(String text) : void
        + getTitle() : String
        + setTitle(String title) : void
        + getType() : String
        + setType(String type) : void
        + getXmlUrl() : String
        + setXmlUrl(String xmlUrl) : void
        + getHtmlUrl() : String
        + setHtmlUrl(String htmlUrl) : void
        + getOutlineList() : List<Outline>
        }
    }
    interface StarredArticleImportedListener {
        + onStarredArticleImported(StarredArticleImportedEvent event) : void
    }
        class StarredReader {
        ' - {static}  log : Logger for implementation not needed for the subsysytem
        - StarredArticleImportedListener : starredArticleImportedListener
        + read(InputStream is) : void
        + setStarredArticleListener(StarredArticleImportedListener starredArticleListener) : void
    }
    StarredReader ...> Feed : feed
    StarredReader ...> Article : article
    StarredReader <-- "1" StarredArticleImportedListener : listens to
    StarredArticleImportedEvent ...> Feed : uses
    StarredArticleImportedEvent ...> Article : uses
    class StarredArticleImportedEvent {
        - Feed: feed
        - Article: article
        + getFeed() : Feed
        + setFeed(Feed feed) : void
        + getArticle() : Article
        + setArticle(Article article) : void
        }
    class Article {
        - String guid
        - String url
        - String title
        - String description
        - String enclosureUrl
        - Integer enclosureLength
        - String enclosureType
        + setGuid(String guid): void
        + setEnclosureUrl(String enclosureUrl): void
        + setEnclosureLength(Integer enclosureLength): void
        + setEnclosureType(String enclosureType): void
        + String getGuid()
        + void setGuid(String guid)
        + String getUrl()
        + String getTitle()
        + String getDescription()
        + void setTitle(String title)
        + void setPublicationDate(Date publicationDate)
        + void setUrl(String url)
        + void setDescription(String description)
    }
    }
        package "core.service" {
            class FeedService {
                + synchronizeAllFeeds(): void
                + synchronize(url: String): Feed
                + startUp(): void
                + shutDown(): void
                + runOneIteration(): void
                - parseFeedOrPage(url: String): RssReader
                - completeArticleList(articleList: List): void
                # scheduler(): Scheduler
            }
        }
        package com.sismics.reader.core.dao.file.rss {
    class AtomArticleCommentUrlGuesserStrategy {
        + guess(List<AtomLink> atomLinkList) : String
    }
    class AtomLink {
        - rel : String
        - type : String
        - href : String

        + AtomLink(String rel, String type, String href)
        + getRel() : String
        + setRel(String rel) : void
        + getHref() : String
        + setHref(String href) : void
        + getType() : String
        + setType(String type) : void
    }
    class AtomArticleUrlGuesserStrategy {
        + guess(List<AtomLink> atomLinkList) : String
    }
    AtomUrlGuesserStrategy ...> "uses" AtomLink
    AtomArticleUrlGuesserStrategy ...> "uses" AtomLink
    ' Atomlink class is not shown in diagram as it has only getter and setter methods which are required essentially user defined data types.
    class AtomUrlGuesserStrategy {
        + guessSiteUrl(List<AtomLink> atomLinkList) : String
        + guessFeedUrl(List<AtomLink> atomLinkList) : String
    }
    class GuidFixer {
        + {static} fixGuid(Article article) : void
    }
    GuidFixer ...> Article : uses
    class RssReader extends DefaultHandler{
    ' - {static} log : Logger
    - {static} DF_RSS : DateTimeFormatter
    - {static} DF_ATOM : DateTimeFormatter
    - {static} DF_DC : DateTimeFormatter
    - content : String
    - feed : Feed
    - article : Article
    - articleList : List<Article>
    - atomLinkList : List<AtomLink>
    - atomArticleLinkList : List<AtomLink>
    - fatalErrorCount : int
    - {static}  URI_XML : String
    - {static}  URI_ATOM :  String
    - {static}  URI_RDF : String
    - {static}  URI_SLASH : String
    - {static}  URI_DC : String
    - {static}  URI_CONTENT : String
    - {static}  URI_THREAD : String
    - feedType : FeedType
    - currentElement : Element
    - elementStack : Stack<Element>
    - {static} FATAL_ERROR_MAX : int
    ' - enum FeedType { RSS, ATOM, RDF }
    ' - enum Element {
    '     UNKNOWN, RSS, RSS_CHANNEL, RSS_TITLE, RSS_LINK,
    '     RSS_DESCRIPTION, RSS_LANGUAGE, ITEM, ITEM_TITLE,
    '     ITEM_GUID, ITEM_LINK, ITEM_COMMENTS, ITEM_SLASH_COMMENTS,
    '     ITEM_DESCRIPTION, ITEM_DC_CREATOR, ITEM_DC_DATE,
    '     ITEM_PUB_DATE, ITEM_CONTENT_ENCODED, ITEM_ENCLOSURE,
    '     FEED, ATOM_TITLE, ATOM_SUBTITLE, ATOM_LINK,
    '     ATOM_ID, ATOM_UPDATED, ENTRY, ENTRY_TITLE,
    '     ENTRY_LINK, ENTRY_UPDATED, ENTRY_ID, ENTRY_SUMMARY,
    '     ENTRY_CONTENT, ENTRY_AUTHOR, AUTHOR_NAME, RDF
    ' }
    'override methods
    + readRssFeed(InputStream is): void
    + startElement(String uri, String localName, String qName, Attributes attributes): void
    + endElement(String uri, String localName, String qName): void
    - pushElement(Element newElement): void
    - popElement(): void
    - validateFeed(): void
    - fixGuid(): void
    + characters(char[] ch, int start, int length): void
    + fatalError(SAXParseException e): Exception
    'should I include this?
    }
    RssReader ...> Feed : uses
    RssReader ...> Article : uses
    class XmlReader {
    - {static} HEADER_SIZE : int
    - internalInputStreamReader : InputStreamReader
    + XmlReader(InputStream in, String defaultEnc) <<not constructor>>
    + close(): void
    + read(char[] cbuf, int off, int len): int
    }
    ' removed articledto as it has only getter and setter methods 
    ' and feeddto as it has only getter and setter methods   
    ' removed jobdto as it has only getter and setter methods
    ' removed jobeventdto as it has only getter and setter methods
    ' removed UserArticleDto as it has only getter and setter methods
    ' removed UserDto as it has only getter and setter methods
    class ReaderStandardAnalyzer {
    + {static} int DEFAULT_MAX_TOKEN_LENGTH = 255
    - int maxTokenLength
    + {static} CharArraySet STOP_WORDS_SET

    + ReaderStandardAnalyzer(Version matchVersion, CharArraySet stopWords)
    + ReaderStandardAnalyzer(Version matchVersion)
    + ReaderStandardAnalyzer(Version matchVersion, Reader stopwords) throws IOException
    + setMaxTokenLength(int length): void
    + getMaxTokenLength(): int
    + createComponents(String fieldName, Reader reader): TokenStreamComponents
    + initReader(String fieldName, Reader reader): Reader
    }

}
        package "rest.resource" {
            class SubscriptionResource extends BaseResource {
                + list(unread: boolean): Response
                + get(id: String, unread: boolean, limit: Integer, afterArticle: String): Response
                + add(url: String, title: String): Response
                + update(id: String, title: String, categoryId: String, order: Integer): Response
                + delete(id: String): Response
                + importFile(fileBodyPart: FormDataBodyPart): Response
                + export(): Response
                + favicon(id: String): Response
            }

            class ArticleResource extends BaseResource {
                + read(id: String): Response
                + readMultiple(idList: List<String>): Response
                + unread(id: String): Response
                + unreadMultiple(idList: List<String>): Response
            }

            class AllResource extends BaseResource {
                + get(unread: boolean, limit: Integer, afterArticle: String): Response
                + read(): Response
            }
        }

        package "rest.assembler" {
            class ArticleAssembler {
                + asJson(article: UserArticleDto): JSONObject
            }
        }
    }

    package "Feed Organization Subsystem" {
        package "core.service" {
            class IndexingService {
                - directory: Directory
                - directoryReader: DirectoryReader
                - luceneStorageConfig: String
                + startUp(): void
                + shutDown(): void
                + searchArticles(userId: String, searchQuery: String, offset: Integer, limit: Integer): PaginatedList<UserArticleDto>
                + rebuildIndex(): void
                + getDirectory(): Directory
                + getDirectoryReader(): DirectoryReader
            }
        }
    package com.sismics.reader.core.dao.jpa {
        class UserDao {
        #getQueryParam(UserCriteria criteria, FilterCriteria filterCriteria) : QueryParam 
        +authenticate(String username, String password) : String
        +create(User user) : User
        +update(User user) : User 
        +updatePassword(User user) : User 
        +getById(String id) : User
        +getActiveByUsername(String username) : User
        +getActiveByPasswordResetKey(String passwordResetKey) : User
        +delete(String username) : void
        #hashPassword(String password) : String
    }
    UserDao --|> BaseDao : extends
    UserDao *-- Constants : uses
    UserDao *-- UserCriteria : uses
    UserDao ...> User : uses
    UserDao ...> UserDto : uses
    UserDao *-- UserMapper : uses
    class JobDao {
        + create(job: Job): String
        + getActiveJob(id: String): Job
        + delete(id: String): void
        + update(job: Job): Job
        # getQueryParam(criteria: JobCriteria, filterCriteria: FilterCriteria): QueryParam
    }

    JobDao --|> BaseDao : extends
    JobDao *-- JobDto : uses
    JobDao *-- JobCriteria : uses
    JobDao *-- JobMapper : uses
    JobDao ...> Job : uses
    JobDao *-- SortCriteria : uses
    JobDao *-- FilterCriteria : uses
    JobDao ...> QueryParam : uses
    class JobEventDao {
        + create(jobEvent: JobEvent): String
        + delete(id: String): void
        # getQueryParam(criteria: JobEventCriteria, filterCriteria: FilterCriteria): QueryParam
    }
    JobEventDao --|> BaseDao : extends
    JobEventDao *-- JobEventCriteria : uses
    JobEventDao ...> JobEvent : uses
    JobEventDao ...> JobEventDto : uses
    JobEventDao --|> BaseDao : extends
    JobEventDao *-- JobEventMapper : uses
    JobEventDao *-- SortCriteria : uses
    JobEventDao *-- FilterCriteria : uses
    class RoleBaseFunctionDao {
        +findByRoleId(String roleId) : List<String> 
    }
    class ArticleDao {
    + rebuildIndex(List<Article> articleList): void
    + create(List<Article> articleList): void
    + update(List<Article> articleList): void
    + delete(List<Article> articleList): void
    + search(PaginatedList<UserArticleDto> paginatedList, String searchQuery): Map<String, Article>
    - getDocumentFromArticle(Article article): Document
}
    class FeedSynchronizationDao {
        + create(feedSynchronization: FeedSynchronization): String
        + deleteOldFeedSynchronization(feedId: String, minutes: int): void
        + findByFeedId(feedId: String): List<FeedSynchronization>
    }
    FeedSynchronizationDao ...> FeedSynchronisation : uses
    class LocaleDao {
        + getById(id: String): Locale
        + findAll(): List<Locale>
    }
    LocaleDao ...> Locale : uses
        }
        package "rest.resource" {
            class CategoryResource extends BaseResource {
                + list(): Response
                + add(name: String): Response
                + update(id: String, name: String, order: Integer, folded: Boolean): Response
                + delete(id: String): Response
                + read(id: String): Response
            }

            class StarredResource extends BaseResource {
                + get(limit: Integer, afterArticle: String): Response
                + star(id: String): Response
                + unstar(id: String): Response
                + starMultiple(idList: List<String>): Response
                + unstarMultiple(idList: List<String>): Response
            }

            class SearchResource extends BaseResource {
                + get(query: String, limit: Integer, offset: Integer): Response
            }

            class JobResource extends BaseResource {
                + delete(id: String): Response
            }
        }

        package "core.util" {
            class LuceneUtil {
                + optimize(directory: Directory): void
                + buildIndex(directory: Directory): void
            }
        }
    }

    package "User Management Subsystem" {
    package "com.sismics.reader.core.dao.jpa.dto"{
    class UserArticleDao {
    + create(UserArticle userArticle) : String 
    + update(UserArticle userArticle) : UserArticle 
    + markAsRead(UserArticleCriteria criteria) : void
    + delete(String id) : void
    + getUserArticle(String id, String userId) : UserArticle 
    + getQueryParam(UserArticleCriteria criteria, FilterCriteria filterCriteria) : QueryParam 
    }
    JobEventDao --|> BaseDao : extends
    UserArticleDao ...> UserArticleDto : uses
    UserArticleDao *-- UserArticleCriteria : uses
    UserArticleDao *-- UserArticleMapper : uses
    UserArticleDao ...> UserArticle : uses
    UserArticleDao *-- SortCriteria : uses
    UserArticleDao *-- FilterCriteria : uses
    UserArticleDao ...> QueryParam : uses
    class UserArticle {
    + String id
    + Date createDate
    + Date readDate
    + Date starredDate
    + Date deleteDate
}

class UserArticleCriteria {
    + Boolean isVisible
    + Boolean isUnread
    + Boolean isStarred
    + String userId
    + String feedId
    + List<String> articleIdIn
    + String articleId
    + String userArticleId
    + Boolean isSubscribed
    + String categoryId
    + Date articlePublicationDateMax
    + Date userArticleStarredDateMax
    + String articleIdMax
    + String userArticleIdMax
    + Boolean isFetchAllFeedSubscription
}
}
        package "com.sismics.reader.core.dao.jpa.dto"{
            class UserDto {
            - String id
            - String localeId
            - String username
            - String email
            - Long createTimestamp

            ' + getId(): String
            ' + setId(String id): void
            ' + getLocaleId(): String
            ' + setLocaleId(String localeId): void
            ' + getUsername(): String
            ' + setUsername(String username): void
            ' + getEmail(): String
            ' + setEmail(String email): void
            ' + getCreateTimestamp(): Long
            ' + setCreateTimestamp(Long createTimestamp): void
        }   
        }
        package "rest.resource" {
            abstract class BaseResource {
                # authenticate(): boolean
                # checkBaseFunction(baseFunction: BaseFunction)
                # principal: IPrincipal
                # hasBaseFunction(baseFunction: BaseFunction): boolean
            }

            class UserResource extends BaseResource {
                + register(username: String, password: String, email: String): Response
                + login(username: String, password: String): Response
                + logout(): Response
                + update(password: String, email: String, theme: String, locale: String): Response
                + delete(): Response
                + info(): Response
            }

            class ThemeResource extends BaseResource {
                + list(): Response
                + get(id: String): Response
            }

            class LocaleResource extends BaseResource {
                + list(): Response
                + set(id: String): Response
            }
        }

        package "rest.constant" {
            enum BaseFunction {
                ADMIN
                PASSWORD
                IMPORT
            }
        }

        package "rest.util" {
            class ValidationUtil {
                + validateTheme(theme: String): String
                + validateLocale(locale: String): String
                + validatePassword(password: String): String
            }
        }

        package "rest.dao" {
            class ThemeDao {
                + findAll(): List<String>
                + getById(id: String): Theme
            }
        }

        package "core.util" {
            class UserUtil {
                + getUsername(): String
                + getUserId(): String
            }
        }
    }
}

' Cross-subsystem relationships
SubscriptionResource ..> CategoryResource: "organizes feeds into"
SearchResource ..> ArticleResource: "searches"
StarredResource ..> ArticleResource: "bookmarks"
UserResource ..> BaseFunction: "requires"
ArticleResource ..> ArticleAssembler: "formats"
UserResource ..> ValidationUtil: "validates"
ThemeResource ..> ValidationUtil: "validates"
ThemeResource --> ThemeDao: "accesses"
LocaleResource ..> ValidationUtil: "validates"
SearchResource ..> IndexingService: "uses"
BaseResource ..> UserUtil: "uses"

@enduml